{
	"info": {
		"_postman_id": "cd3a198d-f3d9-41bb-91f6-edf4c7c49827",
		"name": "NodeJs2022 CRUD Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6362287"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Should return empty list at the begining",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Return empty array\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORT}}/api/users",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"AGE\", Math.floor(Math.random() * 99 + 1)); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Return created user with id\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									"});",
									"",
									"pm.collectionVariables.set(\"LAST_ADDED_USER\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomFullName}}\",\n    \"age\": {{AGE}},\n    \"hobbies\": [\"{{$randomProduct}}\", \"{{$randomProductMaterial}}\", \"{{$randomVerb}}\", \"{{$randomIngverb}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}:{{PORT}}/api/users",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should Get User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Return user\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.equal(pm.collectionVariables.get(\"LAST_ADDED_USER\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORT}}/api/users/{{LAST_ADDED_USER}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"users",
								"{{LAST_ADDED_USER}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sould Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Return updated user with same id\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.id).to.be.equal(pm.collectionVariables.get(\"LAST_ADDED_USER\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomFullName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}:{{PORT}}/api/users/{{LAST_ADDED_USER}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"users",
								"{{LAST_ADDED_USER}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORT}}/api/users/{{LAST_ADDED_USER}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"users",
								"{{LAST_ADDED_USER}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should Fail to Get deleted User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Return error message\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORT}}/api/users/{{LAST_ADDED_USER}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"users",
								"{{LAST_ADDED_USER}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should Fail with unknown route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Return error message\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}:{{PORT}}/{{$randomDirectoryPath}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"{{$randomDirectoryPath}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Should Fail without required user props",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"AGE\", Math.floor(Math.random() * 99 + 1)); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Return error message\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomFullName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}:{{PORT}}/api/users",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "PORT",
			"value": "5050",
			"type": "string"
		},
		{
			"key": "LAST_ADDED_USER",
			"value": ""
		}
	]
}